# -*- coding: utf-8 -*-
"""Q1_MSDS20075.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B7lH9BtyYSXZC_QO8Wr2_18oV2PbRcSL
"""

from sklearn.datasets import load_boston
from sklearn import linear_model
from sklearn.svm import SVR
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error as mse
from sklearn.preprocessing import StandardScaler

"""**Question 1**

1.0.1 Loading and Standardizing Data
"""

boston = load_boston()
X= boston.data
y= boston.target

def standardize(data):
  mean = np.mean(data, 0)
  st_dev = np.std(data, 0)
  return (data - mean)/st_dev


X = standardize(X)
X = np.append(X, np.ones((len(X), 1)), 1)
trainX, testX, trainY, testY = train_test_split(X, y, test_size = 0.209, random_state = 15)

"""**1.0.2   Part(A)**"""

theta = np.dot(np.dot(np.linalg.inv(np.dot(trainX.T, trainX)), trainX.T), trainY)
mse_tr = mse(trainY, trainX, theta)
mse_test = mse(testY, testX, theta)
print('Training Error = {:.4f}\nTesting Error = {:.4f} '.format(mse_tr, mse_test))

"""**1.0.4 part (C)**"""

best_alpha = 0
err_tr = 1000
err_test = 1000

for alpha in np.arange(0.0001,1,0.01):
  reg = linear_model.Lasso(alpha=alpha)
  reg.fit(trainX,trainY)